# -*- coding: utf-8 -*-
"""islab7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oxsaLExPWUjTy70FMkKH6YiyLQ874RE_
"""

import numpy as np
from scipy.stats import multivariate_normal

# Generate synthetic data
np.random.seed(0)
data = np.concatenate([
    np.random.multivariate_normal([0, 0], [[1, 0], [0, 1]], 100),
    np.random.multivariate_normal([4, 4], [[1, 0], [0, 1]], 100),
])

# Initialize parameters for GMM
num_clusters = 2
num_samples, num_features = data.shape
mu = np.random.rand(num_clusters, num_features)
sigma = np.array([np.identity(num_features) for _ in range(num_clusters)])
weights = np.ones(num_clusters) / num_clusters

# EM algorithm
num_iterations = 100
for _ in range(num_iterations):
    # E-step: Compute responsibilities
    responsibilities = np.zeros((num_samples, num_clusters))

    for k in range(num_clusters):
        responsibilities[:, k] = weights[k] * multivariate_normal.pdf(data, mean=mu[k], cov=sigma[k])

    responsibilities = responsibilities / responsibilities.sum(axis=1)[:, np.newaxis]

    # M-step: Update parameters
    Nk = responsibilities.sum(axis=0)

    for k in range(num_clusters):
        weights[k] = Nk[k] / num_samples
        mu[k] = np.sum(data * responsibilities[:, k][:, np.newaxis], axis=0) / Nk[k]
        sigma[k] = np.dot((data - mu[k]).T, (data - mu[k]) * responsibilities[:, k][:, np.newaxis]) / Nk[k]

# Predict cluster assignments
predicted_clusters = np.argmax(responsibilities, axis=1)

# Print the final cluster assignments
print("Cluster Assignments:")
print(predicted_clusters)

# Print the final GMM parameters
print("Final Weights:")
print(weights)
print("Final Means:")
print(mu)
print("Final Covariances:")
print(sigma)